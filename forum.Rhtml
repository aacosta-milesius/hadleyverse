<!--begin.rcode init,echo=FALSE,result="hide"
# build("./hadleyverse/forum.Rhtml", "./templatr/inst/templates/pres1/","index.html",title="The Hadleyverse")
knitr::opts_chunk$set(comment=NA, prompt=TRUE, dev="CairoPNG", cache=TRUE)
knitr::opts_knit$set(root.dir=wd)
op = options()$continue
options(continue=" ")
grDevices::X11.options(type='cairo')
library(readr)
library(lubridate)
library(stringr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggvis)
library(rvest)
library(testthat)
library(devtools)
library(testthat)
end.rcode-->

<div class="slide" id="title">
<h1>Packages of the Hadleyverse</h1>
<h2>Power for your R</h2>
<h3>Barry Rowlingson</h3>
<h4>Lancaster University</h4>
<p style="font-size: 40%">[next slide=right arrow, prev slide=left arrow, or click slide counter top-right for index]</p>
</div>
<div class="slide" id="first">
<h1>Who?</h1>
<div class="left">
<ul>
<li>Hadley Wickham</li>
<li>RStudio Chief Scientist</li>
</ul>
</div>
<div class="right">
<img src="images/hadley.jpg" />
</div>
</div>
<div class="slide" id="another">
<h1>Packages</h1>
<div class="left">
<img class="fit" src="images/MRAN2.png" />
</div>
<div class="right">
<img class="fit" src="images/github.png" />
</div>
</div>

<div class="slide">
<div class="left">
<h1>Beginners</h1>
<dl class="packagelist">
<dt><code>readr</code></dt>
<dd>Reading files</dd>
<dt><code>lubridate</code></dt>
<dd>Date and time handling</dd>
<dt><code>stringr</code></dt>
<dd>Working with text strings</dd>
<!--dt>reshape2</dt>
<dd>Reshape data</dd-->
<dt><code>tidyr</code></dt>
<dd>Make tidy data</dd>
<dt><code>dplyr</code></dt>
<dd>Data manipulation</dd>
<dt><code>ggplot2</code></dt>
<dd>The graphical grammar</dd>
</dl>
</div>
<div class="right">
<h1>Advanced</h1>
<dl class="packagelist">
<dt><code>ggvis</code></dt>
<dd>Web graphics</dd>
<dt><code>rvest</code></dt>
<dd>Web scraping</dd>
<dt><code>devtools</code></dt>
<dd>Package development</dd>
<dt><code>roxygen2</code></dt>
<dd>Document your functions</dd>
<dt><code>testthat</code></dt>
<dd>Automatic code testing</dd>
</dl>
</div>
</div>

<div class="slide">
<h1><code>readr</code></h1>
<p>provides
<ul>
<li>Read/write comma-separated files</li>
<li>Read/write space-separated files</li>
<li>Read/write fixed-field files</li>
</ul>
</p>
<h1>But....</h1>
<p>
Doesn't R already have:
<ul>
<li><code>read.csv</code></li>
<li><code>read.table</code></li>
<li><code>read.fwf</code></li>
</ul>
</p>

<p>How complex are these?</p>
<!--begin.rcode
args(read.csv)
args(read.table)
end.rcode-->

<!--begin.rcode
t1 = read.csv("test2.csv")
summary(t1)
t1 = read.csv("test2.csv", colClass="numeric")
end.rcode-->

<p>Where's the problem?</p>

</div>

<div class="slide">
<h1>With <code>readr</code></h1>
<ul>
<li><code>read_csv</code> for comma-separated</li>
<li><code>read_csv2</code> for semicolon-separated</li>
<li><code>read_tsv</code> for tab-separated</li>
<li><code>read_delim</code> for any-other-char-separated</li>
<li><code>read_table</code> for fixed-width table formatted files</li>
</ul>

<!--begin.rcode
args(read_csv)
end.rcode-->
<p>Lets read that file with 3 numeric columns:</p>

<!--begin.rcode
t1 = read_csv("test2.csv", col_type="nnn")
end.rcode-->
<p>What happened?</p>
<!--begin.rcode
problems(t1)
summary(t1)
end.rcode-->

<p>Also, its faster!</p>

</div>

<div class="slide">
<h1>Oh, did I mention <code>readxl</code></h1>
<p>
This is an easy interface to read Excel spreadsheet files
</p>
</div>


<div class="slide">
<h1><code>lubridate</code></h1>
<p>provides
<ul>
<li>Text to Date/Date Time Conversion</li>
<li>Durations and Intervals</li>
<li>Arithmetic for Dates</li>
</ul>
</p>
<h1>But....</h1>
<p>
Doesn't R already have dates and times?
</p>
<p>
Yes...
</p>
<pre class="list">
strptime                 package:base                  R Documentation

Date-time Conversion Functions to and from Character

Description:

Functions to convert between character representations and objects
of classes ‘"POSIXlt"’ and ‘"POSIXct"’ representing calendar dates
and times.

‘strptime’ converts character vectors to class ‘"POSIXlt"’: its
input ‘x’ is first converted by ‘as.character’.  Each input string
is processed as far as necessary for the format specified: any
trailing characters are ignored.

‘strftime’ is a wrapper for ‘format.POSIXlt’, and it and
‘format.POSIXct’ first convert to class ‘"POSIXlt"’ by calling
‘as.POSIXlt’ (so they also work for class ‘"Date"’).  Note that
only that conversion depends on the time zone.
</pre>

<img src="images/iso_8601.png" width="60%" class="mainpic">
</div>

<div class="slide">
<h1>Make it Easy</h1>
<h2>Dates with <code>ymd</code> etc</h2>
<!--begin.rcode
library(lubridate)
d = ymd(c("2001-01-12", "2011/3/31"))
d
dmy("310314")
end.rcode-->
<h2>Dates and times...</h2>
<!--begin.rcode
dt = ymd_hms("2001-01-12 14:12:00")
dt
end.rcode-->
<h2>Date and Time Info</h2>
<!--begin.rcode
day(dt); month(dt); year(dt)
month(dt, label=TRUE)
wday(dt, label=TRUE)
yday(d) # day of the year (1 to 366)
end.rcode-->
<h2>Durations (aka Periods) and Intervals</h2>
<p>Durations are lengths of time:</p>
<!--begin.rcode
weeks(2)
days(4)
leave = ymd(20150601)    # go away
leave
ret = leave + weeks(2) + days(4)   # come back 2 weeks 4 days later
ret
howlong = ret - leave    # an R difftime
howlong 
end.rcode-->

<p>Intervals are between two fixed time points:</p>
<!--begin.rcode
holiday = leave %--% ret # a lubridate interval
holiday
holiday2 = ymd(20150612) %--% ymd(20150712)
int_overlaps(holiday, holiday2)
lubridate::intersect(holiday, holiday2)
end.rcode-->
</div>

<div class="slide">
<h1><code>stringr</code></h1>
<p>Doesn't R have string handling?</p>
<!--begin.rcode
nchar("Barry")
who = c("Barry", "Fred", "Steve")
nchar(who)
who = c("Sara", "Julie", "Jenny", NA, "Helen")
nchar(who)
end.rcode-->
</div>

<div class="slide">
<h1><code>stringr</code> for sensible string handling</h1>
<!--begin.rcode cache=FALSE
ls("package:stringr")
end.rcode-->
<h2>String Length</h2>
<!--begin.rcode
who
str_length(who)
end.rcode-->

<h2>Pattern count</h2>
<!--begin.rcode 
library(stringr)
fruit <- c("apple", "banana", "pear", "pineapple")
str_count(fruit, "apple")
str_count(fruit, "p")
str_count(fruit, c("a", "b", "p", "p"))
end.rcode-->

<h2>Pattern matching</h2>
<!--begin.rcode
str_detect(fruit, "apple") # find anywhere
str_detect(fruit, "^p")     # ^ matches start
str_detect(fruit, "a$")     # $ matches end
end.rcode-->

<h2>Extracting patterns</h2>
<!--begin.rcode
people = c("Arthur 25", "Barry 33", "Charles 12", "Darren Edward 19")
str_extract(people, "\\d+")     # one or more digits
str_extract(people, "[^0-9]+")  # from start to non-numeric
end.rcode-->

<h2>Trim</h2>
<!--begin.rcode
str_trim(str_extract(people, "[^0-9]*"))
end.rcode-->

<h2>Splitting</h2>
<!--begin.rcode
bp=c("150;120;110", "100;100;110;120;130", "90")
str_split(bp, ";")
str_split(bp, ";", n=2)
end.rcode-->

<h2>Substrings</h2>
<!--begin.rcode
s = "The Quick Brown Fox"
str_sub(s, 5, 9)
str_sub(s, c(1,4,9), 12)   # vectorised
str_sub(s, 5, 9) <- "Slow" # replace with different length
s
str_sub(s, -3, -1)         # negative numbers count from end
str_sub(s,-3, -1) <- "Monkey"
s
end.rcode-->

</div>

<!--div class="slide">
<h1>reshape2</h1>
</div-->

<div class="slide">
<h1><code>tidyr</code></h1>
<h2>A package for making tidy data</h2>
<h3>What is tidy data?</h3>
<p>Read all about it here:
<a href="http://vita.had.co.nz/papers/tidy-data.pdf">http://vita.had.co.nz/papers/tidy-data.pdf</a>. In a nutshell:
<ul>
<li>Each observation is a row</li>
<li>Each variable is a column</li>
<li>No data in labels</li>
</ul>
</p>

<!--begin.rcode makedata ,echo=FALSE,results="hide"
# data set
set.seed(310366)
bpd = data.frame(Name=c("Anne", "Ben", "Carl", "Debs", "Ed"))
bpd$Age=c(35, 41, 33, 27, 22)
bpd$Start = ymd(20140301) + ddays(round(runif(5)*40))
r5 = function(x){round(x*2, -1)/2}
bpf = function(n){
  sys=r5(runif(n, 90, 140));dia=r5(runif(n, 60, 90));paste(sys, dia, sep="/")}

bpd2 = bpd

bpd$Week1=bpf(5)
bpd$Week2=bpf(5)
bpd$Week3=bpf(5); bpd$Week3[3]=NA
bpd$Week4=bpf(5); bpd$Week4[3:4]=NA

bpd2=cbind(bpd2, makebpdf(52,5))

bps2 = gather(bpd2, Week, BP, Week1:Week52) %>%
  separate(BP, c("sys","dia"), "/", convert=TRUE, extra="drop") %>%
  separate(Week, c("X","Week"), 4, convert=TRUE) %>% 
  select(-X) %>%
  filter(!is.na(sys)) %>%
  mutate(obs_date = Start + weeks(Week-1))

 stocksA <- data.frame(
       time = as.Date('2009-01-01') + 0:5,
       MSFT = round(800 + arima.sim(list(ar=c(.99,-.001),ma=c(4,4)),6)),
       GOOG = round(400 + arima.sim(list(ar=c(.99,-.001),ma=c(4,4)),6)),
       ORAC = round(400 + arima.sim(list(ar=c(.99,-.001),ma=c(4,4)),6)),
       AMAZ = round(400 + arima.sim(list(ar=c(.99,-.001),ma=c(4,4)),6)),
       SONY = round(400 + arima.sim(list(ar=c(.99,-.001),ma=c(4,4)),6)),
       YHOO = round(375 + arima.sim(list(ar=c(.99,-.001),ma=c(4,4)),6))
     )
 stocks <- spread(gather(stocksA, Stock, Price, -time), time, Price)

end.rcode-->

<h3>Untidy data</h3>
<p>As seen in spreadsheets...</p>

<!--begin.rcode
stocks
end.rcode-->

<p><code>gather</code> to put one observation per row</p>

<!--begin.rcode
library(tidyr)
stockTidy = gather(stocks, Date, Price, -Stock)
stockTidy[1:20, ]
end.rcode-->

<p><code>spread</code> reverses <code>gather</code> to get
the table format back:</p>

<!--begin.rcode
spread(stockTidy, Date, Price)
end.rcode-->

<p>or this way round:</p>

<!--begin.rcode
spread(stockTidy, Stock, Price)
end.rcode-->

<h2>Why tidy data?</h2>
<p>
Regularity makes queries easy...
</p>
<!--begin.rcode
# any stock prices over 540:
subset(stockTidy, Price > 540)
end.rcode-->

</div>

<div class="slide">
<h1>More tidyr-ing</h1>

<h2>Sample data</h2>
<p>Blood pressure for five individuals recorded over 
up to four weeks</p>
<!--begin.rcode
bpd
end.rcode-->

<p>What's wrong with it?
<ul>
<li>Several observations in a row</li>
<li>Measurement columns have two variables</li>
<li>Week number is coded into the column label</li>
</ul>
</p>

<p>Let's fix this up:
<dl>
<dt>put the weekly measurements onto separate lines:</dt>
<dd>
<!--begin.rcode
bps = gather(bpd, Week, BP, Week1:Week4)
bps
end.rcode-->
</dd>
<dt>split the BP measurement up and convert to numbers</dt>
<dd>
<!--begin.rcode
bps = separate(bps, BP, c("sys","dia"), "/", convert=TRUE, extra="drop")
bps
end.rcode-->
</dd>
<dt>Split the weekN word up on the fourth character</dt>
<dd>
<!--begin.rcode
bps = separate(bps, Week, c("X","Week"), 4, convert=TRUE)
bps
end.rcode-->
</dd>
</dl>

<p>Or we could do it like this...</p>

<!--begin.rcode
bps = separate(
         separate(
           gather(bpd, Week, BP, Week1:Week4),
           BP, c("sys","dia"), "/", convert=TRUE, extra="drop"
         ),
         Week, c("X","Week"), 4, convert=TRUE)
bps
end.rcode-->

<p>And now we have tidy data, except for the redundant <code>X</code>
column....</p>
</div>


<div class="slide">
<h1><code>magrittr</code></h1>
<img class="mainpic" src="images/MagrittePipe.jpg">
<p>
<code>magrittr</code> is about creating <em>pipelines</em>
</p>
<!--begin.rcode 
mean(log(sqrt(1:10)))
end.rcode-->
<p>can be written as a <em>pipeline:</em></p>
<!--begin.rcode
1:10 %>% sqrt() %>% log() %>% mean()
end.rcode-->
<p>especially neat when you have args to each function:</p>
<!--begin.rcode 
mean(sqrt(log(1:10, base=2)),trim=0.1)
end.rcode-->
<p>becomes</p>
<!--begin.rcode
1:10 %>% 
  log(base=2) %>%
  sqrt() %>%
  mean(trim=0.1)
end.rcode-->
<p>because the arguments are now closer to the function names!</p>
</div>

<div class="slide">
<h1>Other pipes</h1>
<h2>"Name" piping: <code>%$%</code></h2>
<p>Makes the names of things on the lhs visible to the rhs:</p>
<!--begin.rcode
data.frame(A=1:100, B=cumsum(runif(100))) %$% plot(A,B, type="l")
end.rcode-->
<h2>"Tee" piping: <code>%T&gt;%</code></h2>
<p>Lets you inject something into the pipe:</p>
<!--begin.rcode
d = data.frame(x=1:10, y=runif(10))
d %T>% plot() %$% sum(x+y)
end.rcode-->
<img class="mainpic" src="images/tee.png" >
<h2>"Back" piping: <code>%&lt;&gt;%</code></h2>
<p>Easy updating of piped objects:</p>
<!--begin.rcode
x = 1:10
x %<>% log(base=10) %>% sqrt()
x
end.rcode-->
<p>Shortcut for</p>
<!--begin.rcode
x = 1:10
x <- x %>% log(base=10) %>% sqrt()
end.rcode-->
</div>

<div class="slide">
<h1><code>magrittr</code> + <code>tidyr</code></h1>
<p>Remember...</p>
<!--begin.rcode eval=FALSE
bps = separate(
         separate(
           gather(bpd, Week, BP, Week1:Week4),
           BP, c("sys","dia"), "/", convert=TRUE, extra="drop"
         ),
         Week, c("X","Week"), 4, convert=TRUE)
end.rcode-->
<p>Can do with pipes:</p>
<!--begin.rcode
bpd
bps = bpd %>% 
      gather(Week, BP, Week1:Week4) %>%
      separate(BP, c("sys","dia"),"/", extra="drop", convert=TRUE) %>%
      separate(Week, c("X","Week"), 4, convert=TRUE)
head(bps)
end.rcode-->
</div>

<div class="slide">
<h1><code>dplyr</code></h1>
<h2>useful functions for tidy data</h2>
<h3>Selecting - chooses <em>columns</em></h2>
<!--begin.rcode
bps %>% select(1,2,3) %>% head() # pipe into head 
bps %>% select(Name, Start) %>% head()
bps %>% select(-X) %>% head()
bps %<>% select(-X) # note backpipe operator here!
end.rcode-->
<h3>Filtering - chooses <em>rows</em></h3>
<!--begin.rcode
bps %>% filter(Name=="Anne")
bps %>% filter(sys >= 140 & dia >=80)
end.rcode-->
<h3>Mutating - adding <em>columns</em></h3>
<!--begin.rcode
bps %>% mutate(obs_date = Start + weeks(Week-1))
# get rid of missing data:
bps %<>% mutate(obs_date = Start + weeks(Week-1)) %>%
        filter(!is.na(sys))
head(bps)
end.rcode-->
<h3>Sorting</h3>
<!--begin.rcode
bps %>% arrange(Name,-sys)
end.rcode-->
</div>

<div class="slide">
<h1><code>dplyr</code> grouping</h1>
<p><code>group_by</code> specifies a grouping of a data frame:</p>
<!--begin.rcode
bps %>% group_by(Name)
end.rcode-->
<p>which you can then pass to <code>summarize</code></p>
<!--begin.rcode
bps %>% group_by(Name) %>% 
  summarize(min=min(sys), max=max(sys))
end.rcode-->

<p>Having the data in a tidy format makes grouping by different
variables easy:
<ul>
<li>What was each person's highest systolic BP</li>
<li>What was the highest BP measured in each week?</li>
</p>

<!--begin.rcode
bps %>% group_by(Name) %>% filter(sys==max(sys))
bps %>% group_by(Week) %>% filter(sys==max(sys))
end.rcode-->

<p><em>Exercise: do those on the untidy, spreadsheet format data.</em></p>

</div>

<div class="slide">
<h1><code>dplyr</code>  data joins</h1>
<!--begin.rcode makejdata ,echo=FALSE,results="hide"
bpsdata = bps2 %>% select(-Age, -Start, -obs_date)
people = bps2 %>% filter(Week==1) %>% select(Name, Age, Start)
end.rcode-->
<p>Suppose the data is in two tables, connected by the <code>Name</code> 
column:</p>
<ul>
<li>People data:
<!--begin.rcode
people
end.rcode-->
</li>
<li>Measurement data:
<!--begin.rcode
head(bpsdata)
end.rcode-->
</li>
</ul>
<p>We can join them using <em>join</em> operations</p>
<!--begin.rcode
left_join(bpsdata, people) %>% head(10)
end.rcode-->
<p>Hence we can compute the observation date by a join and a mutate:</p>
<!--begin.rcode
left_join(bpsdata, people) %>% 
   mutate(obs_date = Start+dweeks(Week-1)) %>%
   head(10)
end.rcode-->
</div>

<div class="slide">
<h1><code>ggplot2</code></h1>
<p>A plotting system, works best with tidy data, implementing a
grammar of graphics</p>
<h2>Concepts</h2>
<dl>
<dt><em>aesthetics</em></dt>
<dd>An <em>aesthetic</em> is a mapping of a data frame column
to some aspect of the thing you are trying to draw - such as
position, size, colour.</dd>
<dt><em>geom</em></dt>
<dd>A <em>geom</em> is a type of graphic that does the mapping
of aesthetics to actual visible things on the page - such 
as point, lines, rectangles, boxplots</dd>
<dt><em>layer</em></dt>
<dd>The plot is built up using layers, starting with the data,
and adding elements until the result is printed.</dd>
</dl>

<h2>Example</h2>
<p>The <code>geom_point</code> geom uses x, y, and colour aesthetics (amongst others)</p>
<!--begin.rcode fig.width=12, fig.height=6, cache=FALSE
library(ggplot2)
ggplot(bps2, aes(x=obs_date, y=sys, colour=Name)) + geom_point()
end.rcode-->
<p>Add a smoothing layer</p>
<!--begin.rcode fig.width=12, fig.height=6, cache=FALSE
ggplot(bps2, aes(x=Week, y=sys)) + geom_point() + 
   stat_smooth(method="loess")
end.rcode-->
<p>Lines need the additional <code>group</code> aesthetic
to define what to join up:</p>
<!--begin.rcode fig.width=12, fig.height=6
ggplot(bps2, aes(x=obs_date, y=sys, group=Name, colour=Name)) +
   geom_line()
ggplot(bps2, aes(x=Week, y=sys, group=Name, colour=Name)) +
   geom_line() + 
   geom_point()
end.rcode-->
<p>To plot more than one variable, specify the aesthetic in the geom.
Getting the legend right takes a bit of fiddling:</p>
<!--begin.rcode  fig.width=12, fig.height=6
ggplot(bps2 %>% filter(Name=="Carl"), aes(x=Week)) +
     geom_line(aes(y=sys, col="sys"), lwd=1) +
     geom_line(aes(y=dia, col="dia"), lwd=1) + 
     scale_colour_manual(name="Phase",
             values=c(sys="red",dia="blue")) + 
     ylab("mmHg")
end.rcode-->
<p>Or tidy the variables using <code>gather</code>:</p>
<!--begin.rcode fig.width=12, fig.height=6
bps2 %>% filter(Name=="Carl") %>% 
  gather(Phase, mmHg, sys:dia) %>% arrange(Week) %>% head()
end.rcode-->
<p>We pipe that into <code>ggplot</code> and the legend is
then automatically nice:</p>
<!--begin.rcode  fig.width=12, fig.height=6
bps2 %>% filter(Name=="Carl") %>% gather(Phase, mmHg, sys:dia) %>%
   ggplot(
    aes(x=Week, y=mmHg, group=Phase, col=Phase)
   ) + 
   geom_line()
end.rcode-->
<h2>Some other geoms</h2>
<h3>histograms</h3>
<!--begin.rcode  fig.width=12, fig.height=6
ggplot(bps2, aes(x=sys)) + geom_histogram(binwidth=1)
ggplot(bps2, aes(x=sys, fill=Name)) + geom_histogram(binwidth=1)
end.rcode-->

<h3>boxplots</h3>
<p>The <code>boxplot</code> geom uses <code>group</code> to
define the set of points in each boxplot:
</p>
<!--begin.rcode fig.width=12, fig.height=6
ggplot(bps2, aes(x=Name, y=sys, group=Name)) + geom_boxplot()
end.rcode-->

<h3>pie charts</h3>
<!--begin.rcode cache=FALSE
ggplot(bps2, aes(size=sys)) + geom_pie()
end.rcode-->

</div>

<div class="slide">
<h1>Saving and Theming</h1>
<p>Layers and plots can be saved:</p>
<!--begin.rcode cache=FALSE
gg = ggplot(bps2, aes(x=sys, y=dia, col=Name))
end.rcode-->
<p>nothing plots until you add geom layers, and print:</p>
<!--begin.rcode fig.width=12, fig.height=6
g = gg + geom_point(aes(size=Week))
g
end.rcode-->
<h2>themes</h2>
<p>Add a <code>theme</code> function to modify a plot's appearance</p>
<!--begin.rcode fig.width=10, fig.height=5
g + theme_bw()
g + theme_minimal()
g + theme_classic()
end.rcode-->
<p>with the <code>ggthemes</code> package you get some more themes:</p>
<!--begin.rcode fig.width=12, fig.height=6
library(ggthemes)
g + theme_excel()
g + theme_tufte()
end.rcode-->
<p>and even...</p>
<img class="mainpic" src="images/xkcd.png">
<p>inspired by <a href="http://www.xkcd.com/">XKCD comic</a></p>
<img style="border: 2px solid red; padding: 1em; margin-bottom: 1em" class="mainpic" src="images/minifigs.png">
<img style="border: 2px solid red; padding: 1em;  margin-bottom: 1em" class="mainpic" src="images/decline.png">
</div>

<div class="slide">
<h1>Faceting</h1>
<p>Faceting is breaking a plot into several mini-plots
by levels of a factor</p>
<!--begin.rcode ggp1, fig.width=10, fig.height=4
ggplot(bps2, aes(x=obs_date, y=sys)) + 
  geom_line() + stat_smooth(method="loess") + 
  facet_wrap(~Name,nrow=1) + 
  theme_stata()
end.rcode-->

<p>By default, each facet uses the same fixed x and y axis range.
This can be changed to "free", so that axes fit the data in the 
facet.</p>
<p>
Here's a ribbon geom with free y axis and common x axis:</p>

<!--begin.rcode ggp2, fig.width=10
ggplot(bps2, aes(x=obs_date, ymin=dia, ymax=sys, fill=Name)) +
  geom_ribbon(alpha=0.5) + 
  facet_wrap(~Name, ncol=1, scales="free_y")
end.rcode-->
</div>

<div class="slide">
<h1>ggvis</h1>
<p>Its like <code>ggplot</code> for web pages:</p>

<!--begin.rcode cache=FALSE
library(ggvis)
mtcars %>% ggvis(x = ~wt, y = ~mpg) %>% layer_points()
end.rcode-->

<p>not quite as feature-ful as <code>ggplot</code>:</p>

<!--begin.rcode cache=FALSE 
bps2 %>% ggvis(x=~obs_date, y=~sys, stroke=~Name, fill=~Name) %>%
   group_by(Name) %>% layer_points() %>% layer_smooths(se=TRUE)
end.rcode-->

<p>Has interactive features:</p>
<img style="border: 3px solid black" src="images/ggvis.png">

</div>

<div class="slide">
<h1>devtools</h1>
<h2>In the old days...</h2>
<ul>
<li>Start R</li>
<li>Edit your R code</li>
<li>Outside R, run <code>R CMD BUILD package</code></li>
<li>Back in R, run <code>install.packages("package", lib.loc="./package")</code></li>
<li>Realise you didn't uninstall the old code</li>
<li>Try again</li>
<li>Discover your C code is still loaded</li>
<li>Quit and put everything in one big script</li>
</ul>
<h2>With <code>devtools</code></h2>
<ol>
<li><code>create("package")</code></li>
<li>edit <code>package/R/function.R</code></li>
<li><code>load_all("package")</code></li>
<li>repeat 2-3 until bugs in code = 0</li>
</ol>

<p><code>devtools</code> takes all the pain out of developing. It removes old R code and
reloads new code, recompiles and loads C and Fortran etc.</p>

</div>

<div class="slide">
<h1>roxygen2</h1>
<h2>In the old days...</h2>
<ul>
<li>Create your function: <code>foo=function(a,b=1){a+b}</code></li>
<li>Use <code>prompt(foo)</code> to create a broken documentation skeleton
in the wrong place:
<pre class="list">
\name{foo}
\alias{foo}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
%%  ~~function to do ... ~~
}
\description{
%%  ~~ A concise (1-5 lines) description of what the function does. ~~
}
\usage{
foo(a, b = 1)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{a}{
%%     ~~Describe \code{a} here~~
}
  \item{b}{
%%     ~~Describe \code{b} here~~
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
ETC
</pre>
</li>
<li>Edit it, put it in the right place</li>
<li>Build your package</li>
<li>Manually create DESCRIPTION and NAMESPACE files</li>
<li>Edit your R code and forget it doesn't match the docs any more</li>
<li>Give up and go live in a shed</li>
</ul>
</div>
<div class="slide">
<h2>With <code>roxygen</code></h2>
<ul>
<li>Use RStudio or Emacs to create a working documentation skeleton
at the start of your function, or make from scratch:
<pre class="list">
##' .. content for \description{} (no empty lines) ..
##'
##' .. content for \details{} ..
##' @title 
##' @param a 
##' @param b 
##' @return 
##' @author Barry Rowlingson

foo = function(a, b=1){
   a+b
   }

</pre></li>
<li>Add any extra goodies to it</li>
<li>Use <code>devtools</code> to build the <code>.Rd</code> files,
DESCRIPTION, and NAMESPACE files</li>
<li>Edit your R code, and your documentation is right there in the same file.</li>
<li>Live happily ever after (yes, this is a bit of a fairy tale)</li>
</ul>

</div>

<div class="slide">
<h1>testthat</h1>
<p>Code testing has various purposes:
<ul>
<li>Check your code produces right answers</li>
<li>Check your code produces right errors</li>
<li>Check your code does only what you say it does</li>
<li>others?</li>
</ul>
</p>
<p>The <code>testthat</code> package lets you write <em>expectations</em> as
R expressions of what should happen:</p>
<!--begin.rcode
foo = function(a, b=1){ a + b }
expect_equal(foo(1), 2)
expect_equal(foo(1, 2), 3)
expect_error(foo())
end.rcode-->

<p>If the expection is correct, nothing happens. Otherwise:</p>

<!--begin.rcode
expect_equal(foo(1), 3)
expect_equal(foo(), 2)
end.rcode-->

<p>You can collect expectations into little suites:</p>

<!--begin.rcode
test_that("foo works", {
  expect_equal(foo(1, 2), 3, info="add 2 numbers")
  expect_equal(foo(1), 2, info="default b is 1")
  expect_error(foo(), info="need one arg")
  expect_error(foo(1,2,3,4,5), info="too many args")
})
end.rcode-->

<p>Now if I change the function definition, I can see 
what tests fail:</p>

<!--begin.rcode
foo = function(a=1,b=3,c=7){a+b+c}
test_that("when tests fail", {
  expect_equal(foo(1, 2), 3, info="add 2 numbers")
  expect_equal(foo(1), 2, info="default b is 1")
  expect_error(foo(), info="need one arg")
  expect_error(foo(1,2,3,4,5), info="too many args")
})
end.rcode-->

<p>Test suites can be put into package test folders and run
by <code>devtools</code></p>

<p>Automated build systems can run tests and report errors!</p>

<p>Guess how the <code>testthat</code> package tests itself?</p>

</div>

<div class="slide">
<h1>Test data as well as code</h1>
<!--begin.rcode
test_that("BP data okay", {
  expect_true(is.factor(bps2$Name))
  expect_true(is.numeric(bps2$sys))
  expect_true(is.numeric(bps2$dia))
  expect_true(all(bps2$sys < 200), info="suspiciously high sys values")
  expect_true(all(bps2$sys > 10), info="suspiciosly low sys values")
})

test_that("BP data size", {
  expect_more_than(nrow(bps2), 10, info="not enough rows of data")
  expect_less_than(nrow(bps2), 200, info="too many rows of data")
})

end.rcode-->
</div>

<div class="slide">
<h1>Other stuff</h1>
<ul>
<li>Advanced R: <a href="http://adv-r.had.co.nz/">http://adv-r.had.co.nz/</a>
<br/>
<img src="images/advr.png">
</li>
<li>R packages: <a href="http://r-pkgs.had.co.nz/">http://r-pkgs.had.co.nz/</a>
<br/>
<img src="images/rpkgs.png"></li>
<ul>
</div>


<!--begin.rcode endit,echo=FALSE,result="hide", cache=FALSE
save(list=c("bps","bpd","bpd2","bps2"),file="/tmp/run.RData")
options(continue=op)
end.rcode-->
